<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lz.ssm.mapper.CustomerTransferMapper">
    <resultMap id="BaseResultMap" type="com.lz.ssm.domain.CustomerTransfer">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="customer_id" property="customer.id" jdbcType="BIGINT"/>
        <result column="operator_id" property="operator.id" jdbcType="BIGINT"/>
        <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP"/>
        <result column="old_seller_id" property="oldSeller.id" jdbcType="BIGINT"/>
        <result column="new_seller_id" property="newSeller.id" jdbcType="BIGINT"/>
        <result column="reason" property="reason" jdbcType="VARCHAR"/>
        <result column="customerName" property="customer.name"/>
        <result column="operatorName" property="operator.name"/>
        <result column="oldSellerName" property="oldSeller.name"/>
        <result column="newSellerName" property="newSeller.name"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from customertransfer
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.lz.ssm.domain.CustomerTransfer" useGeneratedKeys="true" keyProperty="id">
    insert into customertransfer (customer_id, operator_id, operate_time, 
      old_seller_id, new_seller_id, reason
      )
    values (#{customer.id,jdbcType=BIGINT}, #{operator.id,jdbcType=BIGINT}, #{operateTime,jdbcType=TIMESTAMP}, 
      #{oldSeller.id,jdbcType=BIGINT}, #{newSeller.id,jdbcType=BIGINT}, #{reason,jdbcType=VARCHAR}
      )
  </insert>
    <update id="updateByPrimaryKey" parameterType="com.lz.ssm.domain.CustomerTransfer">
    update customertransfer
    set customer_id = #{customer.id,jdbcType=BIGINT},
      operator_id = #{operator.id,jdbcType=BIGINT},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      old_seller_id = #{oldSeller.id,jdbcType=BIGINT},
      new_seller_id = #{newSeller.id,jdbcType=BIGINT},
      reason = #{reason,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
    select id, customer_id, operator_id, operate_time, old_seller_id, new_seller_id, 
    reason
    from customertransfer
    where id = #{id,jdbcType=BIGINT}
  </select>
    <select id="selectAll" resultMap="BaseResultMap">
    select id, customer_id, operator_id, operate_time, old_seller_id, new_seller_id, 
    reason
    from customertransfer
  </select>
    <select id="selectForList" resultMap="BaseResultMap">
    SELECT
	c.NAME AS customerName,
	cr.operate_time,
	op.NAME AS operatorName,
	old.NAME AS oldSellerName,
    new.name as newSellerName,
    cr.reason
    from customertransfer cr JOIN customer c on cr.customer_id=c.id
    join employee op on cr.operator_id=op.id
    join employee old on cr.old_seller_id=old.id
    join employee new on cr.new_seller_id=new.id
    <where>
        <if test=" keyword !=null and keyword != ''">
            and (c.name like concat('%',#{keyword},'%') or c.tel like concat('%',#{keyword},'%'))
        </if>
    </where>
    </select>
</mapper>