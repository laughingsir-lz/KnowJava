<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lz.ssm.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.lz.ssm.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <result column="status" property="status" jdbcType="BIT"/>
        <result column="d_id" property="dept.id"/>
        <result column="d_name" property="dept.name"/>
        <result column="d_sn" property="dept.sn"/>
        <collection property="roles" column="id" select="com.lz.ssm.mapper.RoleMapper.selectByEmployeeId">
        </collection>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <insert id="insert" parameterType="com.lz.ssm.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (name, password, email, 
      age, admin,salt, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT},#{salt,jdbcType=VARCHAR}, #{dept.id,jdbcType=BIGINT})
  </insert>
    <insert id="insertRelation">
     insert into employee_role(employee_id,role_id) values (#{employeeId},#{roleId})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.lz.ssm.domain.Employee">
    update employee
    set name = #{name,jdbcType=VARCHAR},
      password = #{password},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
      where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
    SELECT e.id,e.NAME,e.PASSWORD,e.age,e.email,e.admin,e.dept_id,d.id AS d_id,d.NAME AS d_name,d.sn AS d_sn FROM
        employee e LEFT JOIN department d ON e.dept_id = d.id
    where e.id = #{id,jdbcType=BIGINT}
  </select>
    <select id="selectAll" resultMap="BaseResultMap">
    select id, name, password, email, age, admin, dept_id
    from employee
  </select>
    <select id="queryCount" resultType="java.lang.Integer">
        select count(e.id) from employee e
        <include refid="where_sql"/>
    </select>
    <select id="queryEmp" resultMap="BaseResultMap">
        SELECT e.id,e.NAME,e.PASSWORD,e.age,e.email,e.admin,e.dept_id,e.status,d.id AS d_id,d.NAME AS d_name,d.sn AS d_sn FROM
        employee e LEFT JOIN department d ON e.dept_id = d.id
        <include refid="where_sql"/>
     <!--LIMIT #{start}, #{pageSize}-->
    </select>
    <select id="selectByUsernameAndPassword" resultType="com.lz.ssm.domain.Employee">
         select id, name, password, email, age, admin, dept_id
    from employee
    where name = #{username} and password = #{password}
    </select>

    <sql id="where_sql">
        <where>
            <if test="keyword!=null and ''!=keyword">
                AND (e.name like concat('%',#{keyword},'%')
                OR e.email like concat('%',#{keyword},'%'))
            </if>
            <if test="deptId != null and deptId!=-1">
                AND e.dept_id = #{deptId}
            </if>
        </where>
    </sql>

    <delete id="batchDelete">
        DELETE FROM employee WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="selectByName" resultType="com.lz.ssm.domain.Employee">
        select id, name, password, email, age, admin,status,salt, dept_id from employee where name=#{name}
    </select>



    <update id="startStatus">
        update   employee set status= 1
      where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="disableStatus">
           update   employee set status= 0
      where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateStatus">
        update employee set status=status^1 where id=#{id};
    </update>
<!-- 潜在客户页 下拉框 返回的 角色是 Market 或者 MarketManager的人 查询 -->
    <select id="selectByRoleSn" resultType="com.lz.ssm.domain.Employee">
        select distinct e.id , e.name  from employee e inner join employee_role er on e.id = er.employee_id
        join role r on er.role_id = r.id
        where r.sn in
        <foreach collection="sn" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
     </select>



</mapper>